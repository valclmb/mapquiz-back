generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  tag           String?   @unique
  isOnline      Boolean   @default(false)
  lastSeen      DateTime  @default(now())
  
  // Relations pour les amis
  sentFriendRequests     FriendRequest[] @relation("Sender")
  receivedFriendRequests FriendRequest[] @relation("Receiver")
  friends               Friend[]        @relation("UserFriends")
  friendsOf             Friend[]        @relation("FriendsOfUser")
  gameScores            GameScore[]
  
  // Relations pour le multijoueur
  hostedLobbies    GameLobby[]     @relation("LobbyHost")
  lobbyPlayers     LobbyPlayer[]
  multiplayerResults MultiplayerGameResult[]
  


  @@unique([email])
  @@map("user")
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  status     String   @default("pending") // pending, accepted, rejected
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, receiverId])
  @@map("friend_request")
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friendId  String
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
  @@map("friend")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model GameScore {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score       Int
  totalQuestions Int
  selectedRegions String[] // Régions sélectionnées pour ce quiz
  gameMode    String   @default("quiz") // "quiz" ou "training"
  duration    Int?     // Durée en secondes
  createdAt   DateTime @default(now())

  @@map("game_score")
}

model GameLobby {
  id            String   @id @default(uuid())
  name          String?
  hostId        String
  host          User     @relation("LobbyHost", fields: [hostId], references: [id], onDelete: Cascade)
  status        String   @default("waiting") // waiting, playing, finished
  gameSettings  Json     // Stocke les paramètres du jeu (continents, etc.)
  gameState     Json?    // Stocke l'état du jeu (startTime, etc.)
  authorizedPlayers String[] @default([]) // Tableau d'IDs d'utilisateurs autorisés
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  players       LobbyPlayer[]
  gameResults   MultiplayerGameResult[]

  @@map("game_lobby")
}

model LobbyPlayer {
  id        String   @id @default(uuid())
  lobbyId   String
  lobby     GameLobby @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String   @default("joined") // joined, ready, playing, disconnected
  score     Int      @default(0)
  progress  Int      @default(0)
  validatedCountries String[] @default([])
  incorrectCountries String[] @default([])
  joinedAt  DateTime @default(now())

  @@unique([lobbyId, userId])
  @@map("lobby_player")
}

model MultiplayerGameResult {
  id          String   @id @default(uuid())
  lobbyId     String
  lobby       GameLobby @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score       Int
  totalQuestions Int
  completionTime Int?   // Temps en secondes pour terminer
  position    Int?     // Position dans le classement
  createdAt   DateTime @default(now())

  @@map("multiplayer_game_result")
}


